#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DoAnWebNangCao.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MobileShopDB")]
	public partial class DanhMucModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProductCatalogue(ProductCatalogue instance);
    partial void UpdateProductCatalogue(ProductCatalogue instance);
    partial void DeleteProductCatalogue(ProductCatalogue instance);
    #endregion
		
		public DanhMucModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DanhMucModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DanhMucModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DanhMucModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ProductCatalogue> ProductCatalogues
		{
			get
			{
				return this.GetTable<ProductCatalogue>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductCatalogues")]
	public partial class ProductCatalogue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CatalogueID;
		
		private string _CatalogueName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatalogueIDChanging(int value);
    partial void OnCatalogueIDChanged();
    partial void OnCatalogueNameChanging(string value);
    partial void OnCatalogueNameChanged();
    #endregion
		
		public ProductCatalogue()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CatalogueID
		{
			get
			{
				return this._CatalogueID;
			}
			set
			{
				if ((this._CatalogueID != value))
				{
					this.OnCatalogueIDChanging(value);
					this.SendPropertyChanging();
					this._CatalogueID = value;
					this.SendPropertyChanged("CatalogueID");
					this.OnCatalogueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogueName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CatalogueName
		{
			get
			{
				return this._CatalogueName;
			}
			set
			{
				if ((this._CatalogueName != value))
				{
					this.OnCatalogueNameChanging(value);
					this.SendPropertyChanging();
					this._CatalogueName = value;
					this.SendPropertyChanged("CatalogueName");
					this.OnCatalogueNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
